@page "/"
@using Newtonsoft.Json
@using eShopShare.Models;
@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@*@inject Blazored.SessionStorage.ISyncSessionStorageService sessionStorage*@
@layout WebLayout ;
@inject IOnChangeService _OCSvc;
@inject IToastService _toastSvc;

<style>
    .list-product {
        margin: auto;
        display: flex;
        flex-wrap: wrap;
    }

    .product {
        margin-top: 10px;
        margin-right: 10px;
        width: 205px;
    }

    .img {
        width: 150px;
        display: block;
        margin: auto;
    }

    .title {
        color: #0e0e0e;
        display: block;
        font-size: 15px;
        font-weight: bold;
        text-align: center;
        height: 60px;
    }

    .field-price {
        font-size: 24px;
        color: #d50000;
        margin-bottom: 15px;
        font-weight: 700;
        text-align: center;
    }

    .viewProduct, .addProduct {
        border: 0;
        font-weight: 700;
        padding: 9px 5px;
        background: #ffd800;
        -webkit-border-radius: 5px;
        -moz-border-radius: 5px;
        border-radius: 5px;
        display: block;
        width: 186px;
        margin: 0 auto;
        color: #0e0e0e;
    }

    .addProduct {
        margin-left: 2px;
    }
</style>




@if (monAns == null)
{
    <p><em>Đang tải sản phẩm</em></p>
}
else
{
    <section >
        <div class="text-center container py-5">
            @*<h4 class="mt-4 mb-5"><strong>Bestsellers</strong></h4>*@
            <div class="row">
                @foreach (var item in monAns)
                {
                    if (item.Photos.Any())
                    {
                        temp = imgUrl + item.Photos.FirstOrDefault().FileName;
                    }
                    else
                    {
                        temp = imgUrl + "/nophoto.png";
                    }
                    <div class="col-lg-4 col-md-6 mb-4">
                        <div class="card">
                            <div class="bg-image hover-zoom ripple" data-mdb-ripple-color="light">
                               
                                <a  href="/food-detail/@item.Id">
                                    <div class="hover-overlay">
                                        <img src="@temp"
                                             class="w-100"  style=" height: 200px; width: 100%; border-radius:5px"/>
                                        <div class="mask" style="background-color: rgba(251, 251, 251, 0.15);"></div>
                                    </div>
                                </a>
                            </div>
                            <div class="card-body">
                                <a  class="text-reset">
                                    <h5 class="card-title mb-3">@item.Name</h5>
                                </a>
                              

                                <h6 class="mb-3">
                                    <p>@item.Gia.ToString("n0") VND</p>
                                </h6>
                                <a @onclick="()=>AddCart(item.Id)" class="btn btn-primary text-white">Add cart</a>
                                <a href="/food-detail/@item.Id" class="btn btn-primary">Detail</a>
                            </div>
                        </div>
                    </div>
                        }
                </div>
        </div>
    </section>
}
    @code {
private string name;
    public List<MonAn> monAns = null;
    protected string imgUrl = "";
    protected string temp = "";
    //protected void OnInitialized()
    protected override async Task OnInitializedAsync()
    {
        //sessionStorage.SetItem("name", "John Smith");
        //var name = sessionStorage.GetItem<string>("name");

        //monAns = _monAnService.GetMonAnAll();
        Console.WriteLine("email: " + sessionStorage.GetItem<string>("Email"));
        var apiUrl = config.GetSection("API")["APIUrl"].ToString();
        imgUrl = config.GetSection("API")["ImgUrl"].ToString();

        monAns = new List<MonAn>();
        using (var client = new HttpClient())
        {
            //client.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);
            client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");
            client.BaseAddress = new Uri(apiUrl);
            using (var response = await client.GetAsync("MonAn"))
            {
                string apiResponse = await response.Content.ReadAsStringAsync();
                monAns = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MonAn>>(apiResponse);
            }
        }
    }

    private void AddCart(int id)
    {
        //_cartSvc.AddToCart(id, monAns);
        //var cart = HttpContext.Session.GetString("cart");//get key cart
        var cart = sessionStorage.GetItem<string>("cart");//get key cart
        if (cart == null)
        {

            var monAn = monAns.Where(u => u.Id == id).FirstOrDefault();
            List<CartItem> listCart = new List<CartItem>()
{
                    new CartItem
                    {
                        product = monAn,
                        quantity = 1,
                        Sotien= (double)monAn.Gia
                    }
            };

            PostCartModel giohang = new PostCartModel()
            {
                cartItems = listCart,
                TongTien = Tinhtien(listCart)
            };

            sessionStorage.SetItem("cart", JsonConvert.SerializeObject(giohang));
            //HttpContext.Session.SetString("cart", JsonConvert.SerializeObject(listCart));
        }
        else
        {
            var monAn = monAns.Where(u => u.Id == id).FirstOrDefault();

            PostCartModel giohang = JsonConvert.DeserializeObject<PostCartModel>(cart);
            //List <ViewCart> dataCart = JsonConvert.DeserializeObject<List<ViewCart>>(cart);
            bool check = true;
            for (int i = 0; i < giohang.cartItems.Count; i++)
            {
                if (giohang.cartItems[i].product.Id == id)
                {
                    giohang.cartItems[i].quantity++;
                    giohang.cartItems[i].Sotien = (double)monAn.Gia * giohang.cartItems[i].quantity;
                    check = false;
                }
            }

            if (check)
            {
                //var monAn = monAns.Where(u => u.MonAnID == id).FirstOrDefault();
                giohang.cartItems.Add(new CartItem
                {
                    product = monAn,
                    quantity = 1,
                    Sotien = (double)monAn.Gia * 1
                });
            }
            giohang.TongTien = Tinhtien(giohang.cartItems);
            sessionStorage.SetItem("cart", JsonConvert.SerializeObject(giohang));

            //HttpContext.Session.SetString("cart", JsonConvert.SerializeObject(dataCart));
        }
        _toastSvc.ShowSuccess($"Add Success");
        _OCSvc.Invoke();
        this.StateHasChanged();
    }

    private double Tinhtien(List<CartItem> listCart)
    {
        double tongtien = 0;
        if (listCart != null)
        {
            for (int i = 0; i < listCart.Count; i++)
            {
                tongtien += listCart[i].Sotien;
            }
        }
        return tongtien;
    }
    }

